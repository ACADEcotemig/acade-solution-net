@page "/profile"
@using System.Net.Http.Json
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using AcadeAppWeb.Models
@inject HttpClient Http
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Nav
@inject IJSRuntime JS
@inject AcadeAppWeb.Services.AuthService AuthService

<div class="container my-5 profile-page">
    <h2 class="fw-bold mb-4 text-center text-primary">Meu Perfil</h2>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
            <div class="mt-3 text-muted">Carregando informações do perfil...</div>
        </div>
    }
    else if (user == null)
    {
        <div class="alert alert-warning shadow-sm text-center">
            <strong>Usuário não autenticado.</strong><br />
            <a href="/login" class="alert-link">Clique aqui para fazer login.</a>
        </div>
    }
    else
    {
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="alert @MessageClass alert-dismissible fade show shadow-sm" role="alert">
                @Message
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <div class="card border-0 shadow-lg rounded-4 overflow-hidden">
            <div class="card-body p-4 p-md-5">
                <div class="row g-4 align-items-center">


                        <h4 class="mt-3 mb-1 fw-semibold">@user.Nome</h4>
                        <p class="text-muted small mb-3">@user.Email</p>

                        <button class="btn btn-outline-danger btn-sm px-4"
                                @onclick="DeleteAccount"
                                disabled="@isDeleting">
                            <i class="bi bi-trash me-1"></i>@((isDeleting) ? "Excluindo..." : "Excluir Conta")
                        </button>
                    </div>

                    <!-- Right Column -->
                <div class="col-md-8">
                        <EditForm Model="user" OnValidSubmit="Save">
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Nome</label>
                                    <InputText @bind-Value="user.Nome" class="form-control shadow-sm" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Email</label>
                                    <InputText @bind-Value="user.Email" class="form-control shadow-sm" />
                                </div>


                            <div class="mb-2">
                                <label class="form-label">Nova senha</label>
                                <InputText @bind-Value="password"
                                           placeholder="Deixe em branco para manter"
                                           type="password"
                                           class="form-control"
                                           style="all: unset;
                                           color: #212529;
                                           background-color: #fff;
                                           background-clip: padding-box;
                                           width: 156.667px;
                                           border-radius: 0.5rem;
                                           height: 20px;
                                           font-size: 11.5px;" />
                            </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Telefone</label>
                                    <InputText @bind-Value="user.Telefone" class="form-control shadow-sm" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Localização</label>
                                    <InputText @bind-Value="user.Localizacao" class="form-control shadow-sm" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Interface Preferida</label>
                                    <InputText @bind-Value="user.InterfacePref" class="form-control shadow-sm" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Idioma Preferido</label>
                                    <InputText @bind-Value="user.IdiomaPref" class="form-control shadow-sm" />
                                </div>

                                <div class="col-md-6">
                                    <label class="form-label fw-semibold">Pontos de Coleta</label>
                                    <InputText @bind-Value="user.PontosColeta" class="form-control shadow-sm" />
                                </div>
                            </div>

                            <div class="d-flex justify-content-end mt-4">
                                <button type="submit"
                                        class="btn btn-primary me-2 px-4"
                                        disabled="@isSaving">
                                    <i class="bi bi-save me-1"></i>@((isSaving) ? "Salvando..." : "Salvar")
                                </button>
                                <button type="button"
                                        class="btn btn-outline-secondary px-4"
                                        @onclick="CancelEdit">
                                    <i class="bi bi-arrow-clockwise me-1"></i>Cancelar
                                </button>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
    }
</div>

<style>
    .profile-page {
        animation: fadeIn 0.3s ease-in-out;
    }

    .avatar-placeholder {
        transition: transform 0.2s ease;
    }

        .avatar-placeholder:hover {
            transform: scale(1.05);
        }

    @@keyframes fadeIn fadeIn {
        from

    {
        opacity: 0;
        transform: translateY(10px);
    }

    to {
        opacity: 1;
        transform: translateY(0);
    }

    }

    .form-label {
        color: #495057;
    }

    .form-control {
        border-radius: 0.5rem;
        border: 1px solid #dee2e6;
    }

        .form-control:focus {
            border-color: #0d6efd;
            box-shadow: 0 0 0 0.1rem rgba(13, 110, 253, 0.25);
        }

    .card {
        border-radius: 1rem;
    }
</style>

@code {
    private AcadeAppWeb.Models.Usuario? user;
    private bool loading = true;
    private string password = string.Empty;
    private bool isSaving = false;
    private bool isDeleting = false;
    private string Message = string.Empty;
    private string MessageClass = "alert-info";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var claimsUser = authState.User;
        if (claimsUser?.Identity == null || !claimsUser.Identity.IsAuthenticated)
        {
            loading = false;
            return;
        }

        var email = claimsUser.FindFirst(c => c.Type == "email" || c.Type == ClaimTypes.Email)?.Value;
        if (string.IsNullOrEmpty(email))
        {
            loading = false;
            return;
        }

        try
        {
            var usuarios = await Http.GetFromJsonAsync<List<Usuario>>("/api/usuarios");
            user = usuarios?.FirstOrDefault(u => u.Email == email);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine(ex);
            Message = "Erro ao carregar dados do usuário.";
            MessageClass = "alert-danger";
        }
        finally
        {
            loading = false;
        }
    }

    private void CancelEdit() => _ = OnInitializedAsync();

    private async Task Save()
    {
        if (user == null) return;
        isSaving = true;
        Message = string.Empty;

        try
        {
            if (!string.IsNullOrEmpty(password))
            {
                var pwdResp = await Http.PutAsJsonAsync($"/api/usuarios/{user.Id}/senha", password);
                if (!pwdResp.IsSuccessStatusCode)
                {
                    Message = $"Falha ao atualizar senha ({(int)pwdResp.StatusCode}): {pwdResp.ReasonPhrase}";
                    MessageClass = "alert-danger";
                    isSaving = false;
                    return;
                }
            }

            var updatePayload = new Usuario
            {
                Id = user.Id,
                Nome = user.Nome,
                Email = user.Email,
                Senha = string.Empty,
                Telefone = user.Telefone,
                HistoricoAtv = user.HistoricoAtv,
                RelatorioImpacto = user.RelatorioImpacto,
                InterfacePref = user.InterfacePref,
                IdiomaPref = user.IdiomaPref,
                Localizacao = user.Localizacao,
                PontosColeta = user.PontosColeta
            };

            var resp = await Http.PutAsJsonAsync($"/api/usuarios/{user.Id}", updatePayload);
            if (resp.IsSuccessStatusCode)
            {
                Message = "Perfil atualizado com sucesso.";
                MessageClass = "alert-success";
                password = string.Empty;
                var updated = await Http.GetFromJsonAsync<Usuario>($"/api/usuarios/{user.Id}");
                if (updated != null) user = updated;
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                Message = $"Falha ao atualizar: {(int)resp.StatusCode} {resp.ReasonPhrase}. {body}";
                MessageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            Message = $"Erro ao atualizar perfil: {ex.Message}";
            MessageClass = "alert-danger";
        }
        finally
        {
            isSaving = false;
        }
    }

    private async Task DeleteAccount()
    {
        if (user == null) return;
        var ok = await JS.InvokeAsync<bool>("confirm", "Tem certeza que deseja excluir sua conta? Esta ação é irreversível.");
        if (!ok) return;

        isDeleting = true;
        try
        {
            var resp = await Http.DeleteAsync($"/api/usuarios/{user.Id}");
            if (resp.IsSuccessStatusCode)
            {
                await AuthService.LogoutAsync();
                Nav.NavigateTo("/", forceLoad: true);
            }
            else
            {
                var body = await resp.Content.ReadAsStringAsync();
                Message = $"Falha ao excluir conta: {(int)resp.StatusCode} {resp.ReasonPhrase}. {body}";
                MessageClass = "alert-danger";
            }
        }
        catch (Exception ex)
        {
            Message = $"Erro ao excluir conta: {ex.Message}";
            MessageClass = "alert-danger";
        }
        finally
        {
            isDeleting = false;
        }
    }
}

@page "/usuarios"
@using AcadeAppWeb.Models
@inject HttpClient Http

<h3>Usuarios</h3>

@if (!string.IsNullOrEmpty(ErrorMessage))
{
 <div class="alert alert-danger">@ErrorMessage</div>
}

@if (usuarios == null)
{
 <p><em>Loading...</em></p>
}
else if (!usuarios.Any())
{
 <p><em>Nenhum usuário carregado.</em></p>
}
else
{
 <table class="table">
 <thead>
 <tr>
 <th>Id</th>
 <th>Nome</th>
 <th>Email</th>
 <th>Telefone</th>
 <th>HistoricoAtv</th>
 <th>RelatorioImpacto</th>
 <th>InterfacePref</th>
 <th>IdiomaPref</th>
 <th>Localizacao</th>
 <th>PontosColeta</th>
 <th>Ações</th>
 </tr>
 </thead>
 <tbody>
 @foreach (var u in usuarios)
 {
 <tr>
 <td>@u.Id</td>
 <td>@u.Nome</td>
 <td>@u.Email</td>
 <td>@u.Telefone</td>
 <td>@u.HistoricoAtv</td>
 <td>@u.RelatorioImpacto</td>
 <td>@u.InterfacePref</td>
 <td>@u.IdiomaPref</td>
 <td>@u.Localizacao</td>
 <td>@u.PontosColeta</td>
 <td>
 <button class="btn btn-sm btn-warning" @onclick="() => EditUsuario(u)">Editar</button>
 <button class="btn btn-sm btn-danger" @onclick="() => DeleteUsuario(u.Id)">Excluir</button>
 </td>
 </tr>
 }
 </tbody>
 </table>
}

<hr />
<h4>@(editingUsuario != null ? "Editar Usuário" : "Adicionar Usuário")</h4>

<EditForm Model="usuarioForm" OnValidSubmit="SaveUsuario">
 <InputText @bind-Value="usuarioForm.Nome" placeholder="Nome" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.Email" placeholder="Email" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.Telefone" placeholder="Telefone" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.HistoricoAtv" placeholder="Histórico de Atividades" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.RelatorioImpacto" placeholder="Relatório de Impacto" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.InterfacePref" placeholder="Interface Preferida" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.IdiomaPref" placeholder="Idioma Preferido" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.Localizacao" placeholder="Localização" class="form-control mb-2" />
 <InputText @bind-Value="usuarioForm.PontosColeta" placeholder="Pontos de Coleta" class="form-control mb-2" />

 <button type="submit" class="btn btn-primary mt-2">@((editingUsuario != null) ? "Atualizar" : "Adicionar")</button>
 <button type="button" class="btn btn-secondary mt-2" @onclick="CancelEdit">Cancelar</button>
</EditForm>

@code {
 private List<Usuario>? usuarios;
 private Usuario usuarioForm = new();
 private Usuario? editingUsuario;
 private string? ErrorMessage;

 protected override async Task OnInitializedAsync()
 {
 await LoadUsuarios();
 }

 private async Task LoadUsuarios()
 {
 try
 {
 var apiUsers = await Http.GetFromJsonAsync<List<Usuario>>("/api/usuarios");
 if (apiUsers != null)
 {
 usuarios = apiUsers;
 ErrorMessage = null;
 }
 else
 {
 usuarios = new List<Usuario>();
 ErrorMessage = "Nenhum usuário retornado pela API.";
 }
 }
 catch (Exception ex)
 {
 usuarios = new List<Usuario>();
 ErrorMessage = $"Erro ao carregar usuários: {ex.Message}";
 Console.Error.WriteLine(ex);
 }
 }

 private void EditUsuario(Usuario u)
 {
 editingUsuario = u;
 // copy fields but do not copy Senha into the editable model
 usuarioForm = new Usuario
 {
 Id = u.Id,
 Nome = u.Nome,
 Email = u.Email,
 Senha = string.Empty, // keep blank
 Telefone = u.Telefone,
 HistoricoAtv = u.HistoricoAtv,
 RelatorioImpacto = u.RelatorioImpacto,
 InterfacePref = u.InterfacePref,
 IdiomaPref = u.IdiomaPref,
 Localizacao = u.Localizacao,
 PontosColeta = u.PontosColeta
 };
 }

 private void CancelEdit()
 {
 editingUsuario = null;
 usuarioForm = new Usuario();
 }

 private async Task SaveUsuario()
 {
 try
 {
 if (editingUsuario == null)
 {
 // creation should use the Cadastro page which handles passwords and validation
 ErrorMessage = "Crie novos usuários na página Cadastro.";
 return;
 }
 else
 {
 // update other fields without touching Senha
 var updatePayload = new Usuario
 {
 Id = usuarioForm.Id,
 Nome = usuarioForm.Nome,
 Email = usuarioForm.Email,
 Senha = string.Empty,
 Telefone = usuarioForm.Telefone,
 HistoricoAtv = usuarioForm.HistoricoAtv,
 RelatorioImpacto = usuarioForm.RelatorioImpacto,
 InterfacePref = usuarioForm.InterfacePref,
 IdiomaPref = usuarioForm.IdiomaPref,
 Localizacao = usuarioForm.Localizacao,
 PontosColeta = usuarioForm.PontosColeta
 };

 var putResp = await Http.PutAsJsonAsync($"/api/usuarios/{usuarioForm.Id}", updatePayload);
 if (!putResp.IsSuccessStatusCode) ErrorMessage = $"Falha ao atualizar usuário: {(int)putResp.StatusCode} {putResp.ReasonPhrase}";
 editingUsuario = null;
 }

 usuarioForm = new Usuario();
 await LoadUsuarios();
 }
 catch (Exception ex)
 {
 ErrorMessage = $"Erro ao salvar usuários: {ex.Message}";
 }
 }

 private async Task DeleteUsuario(int id)
 {
 try
 {
 var delResp = await Http.DeleteAsync($"/api/usuarios/{id}");
 if (!delResp.IsSuccessStatusCode) ErrorMessage = $"Erro ao excluir usuário: {(int)delResp.StatusCode} {delResp.ReasonPhrase}";
 await LoadUsuarios();
 }
 catch (Exception ex)
 {
 ErrorMessage = $"Erro ao excluir usuário: {ex.Message}";
 }
 }
}
